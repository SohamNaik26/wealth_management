"""add subscription models

Revision ID: 8f06615a17a1
Revises: 
Create Date: 2025-05-31 11:51:42.494472

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8f06615a17a1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('_prisma_migrations')
    op.drop_index('User_email_key', table_name='User')
    op.drop_table('User')
    op.drop_table('Asset')
    op.drop_table('Portfolio')
    op.drop_table('FinancialGoal')
    op.drop_table('Transaction')
    op.drop_table('EducationalResource')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('EducationalResource',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', postgresql.ENUM('INVESTING_BASICS', 'RETIREMENT_PLANNING', 'TAX_STRATEGIES', 'DEBT_MANAGEMENT', 'BUDGETING', 'ESTATE_PLANNING', 'MARKET_ANALYSIS', 'OTHER', name='ResourceCategory'), autoincrement=False, nullable=False),
    sa.Column('fileUrl', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='EducationalResource_pkey')
    )
    op.create_table('Transaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', postgresql.ENUM('BUY', 'SELL', 'DIVIDEND', 'TRANSFER_IN', 'TRANSFER_OUT', 'INTEREST', 'FEE', 'OTHER', name='TransactionType'), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('fee', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('assetId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('portfolioId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['assetId'], ['Asset.id'], name='Transaction_assetId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['portfolioId'], ['Portfolio.id'], name='Transaction_portfolioId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Transaction_pkey')
    )
    op.create_table('FinancialGoal',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('targetAmount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('currentAmount', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('startDate', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('targetDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('category', postgresql.ENUM('RETIREMENT', 'EDUCATION', 'HOME', 'EMERGENCY_FUND', 'TRAVEL', 'VEHICLE', 'DEBT_PAYMENT', 'OTHER', name='GoalCategory'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'ON_HOLD', name='GoalStatus'), server_default=sa.text('\'IN_PROGRESS\'::"GoalStatus"'), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='FinancialGoal_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='FinancialGoal_pkey')
    )
    op.create_table('Portfolio',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Portfolio_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name='Portfolio_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Portfolio_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('Asset',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('assetType', postgresql.ENUM('STOCK', 'BOND', 'ETF', 'MUTUAL_FUND', 'CRYPTO', 'REAL_ESTATE', 'CASH', 'OTHER', name='AssetType'), autoincrement=False, nullable=False),
    sa.Column('currentValue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('purchasePrice', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('purchaseDate', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('lastUpdated', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('portfolioId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['portfolioId'], ['Portfolio.id'], name='Asset_portfolioId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Asset_pkey')
    )
    op.create_table('User',
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('firstName', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('lastName', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='User_pkey')
    )
    op.create_index('User_email_key', 'User', ['email'], unique=True)
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='_prisma_migrations_pkey')
    )
    # ### end Alembic commands ### 